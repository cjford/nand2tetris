function Math.init 0
push constant 0
return
function Math.abs 1
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
pop local 0
goto IF_END0
label IF_FALSE0
push argument 0
pop local 0
label IF_END0
push local 0
return
function Math.multiply 2
label WHILE_EXP0
push local 0
push argument 1
call Math.abs 1
lt
not
if-goto WHILE_END0
push local 1
push argument 0
call Math.abs 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push argument 1
push local 1
call Math.signed_output 3
return
function Math.divide 2
push argument 0
call Math.abs 1
pop local 1
label WHILE_EXP0
push local 1
push argument 1
call Math.abs 1
sub
push constant 0
gt
push local 1
push argument 1
call Math.abs 1
sub
push constant 0
eq
or
not
if-goto WHILE_END0
push local 1
push argument 1
call Math.abs 1
sub
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push argument 1
push local 0
call Math.signed_output 3
return
function Math.signed_output 1
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 1
push constant 0
lt
push argument 0
push constant 0
gt
and
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push argument 2
sub
push argument 2
sub
pop argument 2
goto IF_END0
label IF_FALSE0
push argument 2
pop argument 2
label IF_END0
push argument 2
return
function Math.pow 2
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
label IF_FALSE0
push constant 1
pop local 0
push argument 0
pop local 1
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push argument 0
call Math.multiply 2
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.sqrt 2
push constant 1
pop local 0
push argument 0
pop local 1
label WHILE_EXP0
push local 0
push local 1
sub
call Math.abs 1
push constant 1
gt
not
if-goto WHILE_END0
push local 0
push local 1
add
push constant 2
call Math.divide 2
pop local 0
push argument 0
push local 0
call Math.divide 2
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
call Math.abs 1
return
function Math.max 1
push argument 0
pop local 0
push argument 1
push argument 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
pop local 0
label IF_FALSE0
push local 0
return
function Math.min 1
push argument 0
pop local 0
push argument 1
push argument 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
pop local 0
label IF_FALSE0
push local 0
return
