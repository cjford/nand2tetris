// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inputA);

    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[4], out=writeD);
    Or(a=aInstruction, b=instruction[5], out=writeA);

    ARegister(in=inputA, out=outA, out[0..14]=addressM, load=writeA);
    DRegister(in=outALU, out=outD, load=writeD);

    Mux16(a=outA, b=inM, sel=instruction[12], out=AorM);
    ALU( x=outD, y=AorM,
         zx=instruction[11], nx=instruction[10],
         zy=instruction[9], ny=instruction[8],
         f=instruction[7], no=instruction[6],
         zr=zr, ng=ng,
         out=outALU, out=outM);

    // Jump logic
    DMux8Way(in=true, a=nojmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp6,
             sel[2]=instruction[2], sel[1]=instruction[1], sel[0]=instruction[0]);

    Not(in=ng, out=notneg);
    Not(in=zr, out=notzr);
    Not(in=pos, out=notpos);
    And(a=notneg, b=notzr, out=pos);
    Or(a=zr, b=pos, out=ge);
    Or(a=zr, b=ng, out=le);

    And(a=jgt, b=pos, out=jmp0);
    And(a=jeq, b=zr, out=jmp1);
    And(a=jge, b=ge, out=jmp2);
    And(a=jlt, b=ng, out=jmp3);
    And(a=jne, b=notzr, out=jmp4);
    And(a=jle, b=le, out=jmp5);

    Or8Way(in[0]=jmp0, in[1]=jmp1, in[2]=jmp2, in[3]=jmp3,
           in[4]=jmp4, in[5]=jmp5, in[6]=jmp6, in[7]=false, out=jmp);

    // Only jump on C-instructions
    And(a=instruction[15], b=jmp, out=loadPC);
    // Only increment PC when not jumping
    Not(in=loadPC, out=incPC);

    PC(in=outA, reset=reset, load=loadPC, inc=incPC, out[0..14]=pc);
}
